# Name: DotNet-Project-System
# URL: https://dev.azure.com/devdiv/DevDiv/_build?definitionId=9675
#
# Responsible for producing the signed product build for insertion into the Visual Studio repository
#
# NOTE: triggers for this build are defined in the Web UI instead of here in the YAML file so they
#       apply to all branches.

###################################################################################################################################################################
# PIPELINE METADATA
###################################################################################################################################################################

resources:
- repo: self
  clean: true
queue:
  name: VSEngSS-MicroBuild2019-1ES
  demands: Cmd
  timeoutInMinutes: 90
variables:
  BuildConfiguration: Release
  TeamName: DotNet-Project-System
  BuildPlatform: any cpu
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

###################################################################################################################################################################
# INSTALLATION
###################################################################################################################################################################

steps:
- task: MicroBuildSigningPlugin@4
  displayName: Install Signing Plugin
  inputs:
    signType: real
    esrpSigning: true

# This is use as a PackageReference with ExcludeAssets="all", which means it is not executed.
# RepoToolset has custom logic to run the contents of this plugin, so it is not executed normally.
- task: MicroBuildSwixPlugin@1
  displayName: Install Swix Plugin

# This requires the OptimizationInputs via the 'Publish OptimizationInputs drop' step in the release pipeline.
# To generate ProfilingInputs for the first time, set this input: ShouldSkipOptimize: true
# This plugin will restore MicroBuild.Plugins.OptProf which is required to create ProfilingInputs data.
# The MicroBuild.VisualStudio package uses MicroBuild.Plugins.OptProf to run the target GenerateProfilingInputs on each project.
- task: MicroBuildOptProfPlugin@6
  displayName: Install OptProf Plugin
  inputs:
    ProfilingInputsDropName: 'ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
    OptimizationInputsLookupMethod: 'DropPrefix'
    DropNamePrefix: 'OptimizationInputs/$(System.TeamProject)/$(Build.Repository.Name)'
    AccessToken: '$(System.AccessToken)'
    feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
    ShouldSkipOptimize: false
    NumberCommitsToSearch: '100'

# NOTE: Shouldn't need this for now since this was for manual IBC merging in the AppDesigner/Editors projects.
# - task: NuGetCommand@2
#   displayName: Restore 'Microsoft.DotNet.IBCMerge' package
#   inputs:
#     command: restore
#     feedsToUse: config
#     restoreSolution: 'build\proj\internal\RestoreIBCMerge.csproj'
#     nugetConfigPath: 'NuGet.config'

###################################################################################################################################################################
# BUILD SOLUTION
###################################################################################################################################################################

# TODO: Merged PIAs - reset to /ibc once private feeds are removed and Microsoft.DotNet.IBCMerge is reset
- script: $(Build.SourcesDirectory)\build.cmd /build /test /ci /sign /diagnostic /no-deploy /no-integration /no-ibc /no-clearnugetcache /configuration $(BuildConfiguration)
  displayName: Build ProjectSystem.sln

# Note: Does not verify that .vsix files are signed.
- task: MicroBuildCodesignVerify@3
  displayName: Verify Signed Files
  inputs:
    TargetFolders: $(Build.SourcesDirectory)/artifacts/$(BuildConfiguration)/packages
    ApprovalListPathForCerts: $(Build.SourcesDirectory)\build\ci\no_authenticode.txt

- task: Ref12Analyze@0
  displayName: Create Codex Index
  inputs:
    workflowArguments: |
     /sourcesDirectory:$(Build.SourcesDirectory)
     /codexRepoUrl:$(Build.Repository.Uri)
     /repoName:$(Build.Repository.Name)
     /additionalCodexArguments:-bld
     /additionalCodexArguments:$(Build.SourcesDirectory)\artifacts\Release\log
  condition: succeeded()
  continueOnError: true

- task: PublishTestResults@2
  displayName: Publish Test Results
  inputs:
    testRunner: XUnit
    testResultsFiles: 'artifacts/$(BuildConfiguration)/TestResults/*.xml'
    testRunTitle: 'Unit Test Results'
  condition: succeededOrFailed()

###################################################################################################################################################################
# PUBLISH SYMBOLS
###################################################################################################################################################################

# TODO: Test if this is actually doing anything.
# - task: PowerShell@2
#   displayName: Set VSTS variables based on source
#   inputs:
#     filePath: build\variables\_vsts.ps1
#     failOnStderr: true

# Symbols is the one thing we cannot declare in the ps1 artifact scripts due to the extra steps needed and the specific order it has to be performed in.
# Copy -> Publish Symbols -> Publish Artifact -> Publish to SymWeb
- task: CopyFiles@2
  displayName: Copy Symbols
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)\artifacts\$(BuildConfiguration)'
    Contents: |
      **/Microsoft.VisualStudio.ProjectSystem.Managed?(*.pdb|*.dll|*.xml)
      **/Microsoft.VisualStudio.AppDesigner?(*.pdb|*.dll|*.xml)
      **/Microsoft.VisualStudio.Editors?(*.pdb|*.dll|*.xml)
    TargetFolder: $(Build.ArtifactStagingDirectory)/Symbols

# https://docs.microsoft.com/azure/devops/pipelines/tasks/build/index-sources-publish-symbols
- task: PublishSymbols@2
  displayName: Publish Symbols to Azure Artifacts
  inputs:
    SymbolsFolder: $(Build.ArtifactStagingDirectory)/Symbols
    SearchPattern:
      '**/*.pdb
      **/*.dll
      **/*.exe'
    publishSymbols: true
    SymbolServerType: TeamServices
    SymbolsProduct: 'DotNet Project System'
    SymbolsVersion: '$(Build.BuildNumber)'
    SymbolsArtifactName: Symbols
  continueOnError: true

# TODO: These files are already published via 'Publish Artifacts' section
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Symbols'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Symbols'
    ArtifactName: Symbols
    publishLocation: Container

###################################################################################################################################################################
# PUBLISH OPTPROF METADATA
###################################################################################################################################################################

# This is required to deploy the tests to devdiv.artifacts.visualstudio.com for the 'Deploy tests' step in the release pipeline.
- task: artifactDropTask@0
  displayName: 'Publish to Artifact Services: ProfilingInputs'
  inputs:
    dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
    buildNumber: 'ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
    sourcePath: '$(Build.ArtifactStagingDirectory)\OptProf\ProfilingInputs'
    toLowerCase: false
    usePat: true
    AccessToken: '$(System.AccessToken)'
  condition: succeeded()

# MicroBuildBuildVSBootstrapper requires MicroBuildSigningPlugin for signjson.exe to run.
- task: MicroBuildBuildVSBootstrapper@2
  displayName: Build VS Bootstrapper
  inputs:
    vsMajorVersion: 17
    channelName: 'int.main'
    manifests: '$(Build.SourcesDirectory)\artifacts\$(BuildConfiguration)\VSSetup\Insertion\Microsoft.VisualStudio.ProjectSystem.Managed.vsman'
    outputFolder: $(Build.SourcesDirectory)\artifacts\$(BuildConfiguration)\VSSetup\Insertion
    # bootstrapperCoreVersion: '1.15.76-develop-g446ca603'
    # bootstrapperCoreFeedSource: 'https://devdiv.pkgs.visualstudio.com/_packaging/Setup/nuget/v3/index.json'
    # bootstrapperCoreDependenciesFeedSource: 'https://devdiv.pkgs.visualstudio.com/_packaging/Setup-Dependencies/nuget/v3/index.json'
    # nugetOrgPublicFeedSource: 'https://api.nuget.org/v3/index.json'
  condition: succeeded()

- task: PowerShell@2
  displayName: Update RunSettings via Bootstrapper data
  inputs:
    filePath: build\optprof\UpdateRunSettings.ps1
    arguments: '-profilingInputsPath "ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)" -bootstrapperInfoPath "$(Build.StagingDirectory)\MicroBuild\Output\BootstrapperInfo.json"'
    failOnStderr: true

- task: artifactDropTask@0
  displayName: 'Publish to Artifact Services: RunSettings'
  inputs:
    dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
    buildNumber: 'RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
    sourcePath: '$(Build.SourcesDirectory)\build\optprof'
    toLowerCase: false
    usePat: true
    AccessToken: '$(System.AccessToken)'
    dropMetadataContainerName: RunSettings
  condition: succeeded()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: MicroBuildOutputs'
  inputs:
    PathtoPublish: $(Build.StagingDirectory)\MicroBuild\Output
    ArtifactName: MicroBuildOutputs
    ArtifactType: Container
  condition: succeededOrFailed()

###################################################################################################################################################################
# PUBLISH ARTIFACTS
###################################################################################################################################################################

# TODO: DropName: 'Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
- task: MicroBuildUploadVstsDropFolder@1
  displayName: Publish VS Setup
  inputs:
    DropFolder: 'artifacts\$(BuildConfiguration)\VSSetup\Insertion'
    AccessToken: $(System.AccessToken)

- task: CopyFiles@2
  displayName: Copy Artifacts
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
      artifacts\$(BuildConfiguration)\bin\Dlls\*
      artifacts\$(BuildConfiguration)\DevDivInsertionFiles\**
      artifacts\$(BuildConfiguration)\log\**
      artifacts\$(BuildConfiguration)\packages\**
      artifacts\$(BuildConfiguration)\VSSetup\*
      artifacts\$(BuildConfiguration)\VSSetup\Insertion\*
      artifacts\$(BuildConfiguration)\TestResults\**
    TargetFolder: $(Build.ArtifactStagingDirectory)/ArtifactsDrop
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/ArtifactsDrop/artifacts/$(BuildConfiguration)'
    ArtifactName: Artifacts
    publishLocation: Container
  condition: succeededOrFailed()

###################################################################################################################################################################
# PUBLISH PACKAGE
###################################################################################################################################################################

- task: NuGetToolInstaller@0
  displayName: Install NuGet
  inputs:
    versionSpec: '4.9.2'

# Authenticate with a service connection to be able to publish packages to external (different DevOps organization) NuGet feeds.
- task: NuGetAuthenticate@0
  displayName: Authenticate NuGet
  inputs:
    nuGetServiceConnections: azure-public/vs-impl

# Publishes the packages to https://dev.azure.com/azure-public/vside/_packaging?_a=feed&feed=vs-impl
# For documentation purposes the old feeds are stored in https://dev.azure.com/dnceng/public/_packaging?_a=feed&feed=myget-legacy%40Local
- task: NuGetCommand@2
  displayName: Publish Packages to azure-public/vs-impl
  inputs:
    command: push
    packagesToPush: 'artifacts\$(BuildConfiguration)\packages\*.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: azure-public/vs-impl

# Publish to https://dev.azure.com/DevDiv/DevDiv/_artifacts/feed/VS
- task: NuGetCommand@2
  displayName: Publish Packages to DevDiv/VS
  inputs:
    command: push
    packagesToPush: 'artifacts\$(BuildConfiguration)\packages\*.nupkg'
    # https://devdiv.pkgs.visualstudio.com/_packaging/VS/nuget/v3/index.json via VssFeedId
    # publishVstsFeed: '97a41293-2972-4f48-8c0e-05493ae82010'
    publishVstsFeed: 'DevDiv/VS'
    allowPackageConflicts: true

###################################################################################################################################################################
# CLEANUP
###################################################################################################################################################################

- task: MicroBuildCleanup@1
  displayName: Perform Cleanup
  condition: always()